name: Deploy Infrastructure

on:
  push:
    branches:
      - master
    paths:
      - 'infrastructure/**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}
  REGION: ${{ vars.REGION }}

jobs:
  git2s3:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/cloudformation

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET }}
        aws configure set region ${{ vars.REGION }}  # Change this to your AWS region

    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file git2s3.yaml \
          --stack-name git2s3-${{ vars.NAME_APPLICATION }} \
          --parameter-overrides file://parameters.json \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM

    - name: Get Value Git Pull Web Hook API
      run: |
        GitPullWebhookAPI=$(aws cloudformation describe-stacks \
          --stack-name git2s3-${{ vars.NAME_APPLICATION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`GitPullWebHookApi`].OutputValue' \
          --output text)
                 
        echo "GitPullWebhookAPI=$GitPullWebhookAPI" >> $GITHUB_ENV

    - name: Get Public SSH Key
      run: |
        aws cloudformation describe-stacks \
          --stack-name git2s3-${{ vars.NAME_APPLICATION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`PublicSSHKey`].OutputValue' \
          --output text > PublicSSHKey.pub

    - name: Bucket Git2S3
      run: |
        Bucket_Git=$(aws cloudformation describe-stacks \
          --stack-name git2s3-${{ vars.NAME_APPLICATION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`OutputBucketName`].OutputValue' \
          --output text)

        echo "S3BucketName='$Bucket_Git'" | tr \' \" 
        echo "S3BucketName='$Bucket_Git'" | tr \' \" > terraform.tfvars
        Object_Bucket=$(echo "${{ vars.REPOSITORY_SLUG }}" | sed 's/\//\_/')
        echo "S3ObjectKey='${{ vars.REPOSITORY_SLUG }}/master/$Object_Bucket.zip'" | tr \' \" 
        echo "S3ObjectKey='${{ vars.REPOSITORY_SLUG }}/master/$Object_Bucket.zip'" | tr \' \" >> terraform.tfvars
        ls -las
        pwd

    - name: Upload Name of Bucket Git2s3 to file
      uses: actions/upload-artifact@v3
      with:
        name: env-artifact
        path: ${{ github.workspace }}/infrastructure/cloudformation/terraform.tfvars
        if-no-files-found: error

    - name: Authenticate with GitHub CLI
      run: gh auth login --with-token <<< ${{ secrets.GIT_ACCESS_TOKEN }}

    - name: Add public key to repository
      run: gh repo deploy-key add PublicSSHKey.pub --title "Git2S3-${{vars.NAME_APPLICATION}}"

    - name: Add Webhook in Github
      run: |
        gh api /repos/${{ vars.REPOSITORY_SLUG }}/hooks \
         --input - <<< '{ 
            "config": {
              "url": "${{ env.GitPullWebhookAPI }}",
              "secret": "test456",
              "content_type": "json"
            }
          }'
        

  deploy_codepipeline:
    needs: git2s3
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.7

    - name: Download environment variable file
      uses: actions/download-artifact@v3
      with:
        name: env-artifact

    - name: Initialization Terraform
      run: terraform init
    
    - name: Validate Terraform configuration
      run: terraform validate

    - name: Plan Terraform
      run: |
        mv ${{ github.workspace }}/terraform.tfvars .
        terraform plan -var-file terraform.tfvars

    - name: Deploy Terraform
      run: terraform apply -auto-approve 