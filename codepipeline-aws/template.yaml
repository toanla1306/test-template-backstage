apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: Node-Application-Template
  title: Node Application Template
  description: An example template for the scaffolder that creates a simple Node.js service
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
        - account_id
        - region
        - bucket_docs
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        
        account_id:
          title: Account ID
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5

        region:
          title: Region in AWS
          type: string

        bucket_docs:
          title: Bucket Store Docs
          type: string
        
    - title: Choose a location
      required:
        - repoUrl
        - git_access_token
        - aws_id
        - aws_secret
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
        aws_id:
          title: AWS ID
          type: string
          ui:widget: password
        aws_secret:
          title: AWS Secret
          type: string
          ui:widget: password
        git_access_token:
          title: GIT Access Token
          type: string
          ui:widget: password

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        copyWithoutRender:
          - .github/workflows/*
        values:
          name: ${{ parameters.name }}
          account_id: ${{ parameters.account_id }}
          region: ${{ parameters.region }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        repoVariables:
          NAME_APPLICATION: ${{ parameters.name }}
          REGION: ${{ parameters.region }}
          REPOSITORY_SLUG: ${{ parameters.repoUrl | projectSlug }}
          BUCKET_NAME: ${{ parameters.bucket_docs }}
        secrets:
          AWS_ID: ${{ parameters.aws_id }}
          AWS_SECRET: ${{ parameters.aws_secret }}
          GIT_ACCESS_TOKEN: ${{ parameters.git_access_token }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
